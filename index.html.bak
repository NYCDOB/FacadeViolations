<!DOCTYPE html>
<html>
  <title>Facade Violations</title>
  <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' />
  <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
  <link rel="stylesheet" type="text/css" href="https://nycdob.github.io/ActiveNB_A1enlargements/keen/keen-dashboards.css" />
  <link href='https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css' rel='stylesheet' type='text/css'/>
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.12/r-2.1.0/se-1.2.0/datatables.min.css">
  <link href="https://nycdob.github.io/ActiveNB_A1enlargements/build/nv.d3.css" rel="stylesheet" type="text/css">
  <style>


body {
	background-color: white;
}

#map {
	height: 100%;
	width: 100%;
	background-color: #333;
	pointer-events: all;
}

.pointTechRpt{
	fill: #5678A6;
	fill-opacity: .7;
	stroke: #fff;

}
.pointAmendTechRpt{
	fill: #7EB7B1;
	fill-opacity: .7;
	stroke: #fff;

}
.pointBldgWalls{
	fill: #EA9135;
	fill-opacity: .7;
	stroke: #fff;

}
.pointProtPublic{
	fill: #D95D5B;
	fill-opacity: .7;
	stroke: #fff;

}
.tooltipFacades {
	color: #222;
	background: #fff;
	padding: .5em;
	text-shadow: #f5f5f5 0 1px 0;
	border-radius: 7px; 
	box-shadow: 0px 0px 2px 0px #a6a6a6; 
	opacity: 0.9; 
	position: absolute;
	visibility: hidden;
}



/* @media( max-width:1200px){
	.dobmain	{
		padding-top:50px;
	}
	.legendShed {
		visibility:hidden;
	}
	.legendCD {
		visibility:hidden;
	}
	.ui {
		margin-top: -150px;
	}
}
@media ( max-width:2100px){
	.summarytxt_sheds {
		font-size: 12px !important;
	}
	.summarytxt_avgAge {
		font-size: 12px !important;
	}
	.summarytxt_feet {
		font-size: 12px !important;
	}
	#summary1_sheds {
		font-size: 25px !important;
	}
	#summary2_avgAge {
		font-size: 25px !important;
	}
	#summary3_feet {
		font-size: 25px !important;
	}
	.summarytxt {
		font-size: 12px !important;
	}
} */


svg {
	display: block;
}


#chart-01{
    box-sizing: border-box;
    width: 100%;
	<!-- height: 150px; -->
	height: 100%;
    <!-- border: 0.5px solid gray; -->
    float: left;
	background-color: #dfdfdf;
	<!-- margin: 0px 0px 12px; -->
}

#chart-boro-facades{
    box-sizing: border-box;
    width: 100%;
	height: 200px;
    float: left;
	background-color: #dfdfdf;
	margin-bottom: 10px;
}
#chart-status{
    box-sizing: border-box;
    width: 100%;
	height: 200px;
    float: left;
	background-color: #dfdfdf;
	margin-bottom: 10px;
}
#borosheds{
	margin-top: 10px;
	padding: 0px;
	height: 150px;
	width: 100%;
	background-color: #fff;
}
#vioDescChart{
	margin-top: 10px;
	padding: 0px;
	height: 140px;
	width: 100%;
	background-color: #fff;
}


#chart-cycles{
    box-sizing: border-box;
    width: 100%;
	height: 200px;
    <!-- border: 0.5px solid gray; -->
    float: left;
	background-color: #dfdfdf;
	<!-- margin: 0px 0px 12px; -->
}

#chart-subcycles{
    box-sizing: border-box;
    width: 100%;
	height: 270px;
    <!-- border: 0.5px solid gray; -->
    float: left;
	background-color: #dfdfdf;
	<!-- margin: 0px 0px 12px; -->
}

.summarytxt{
	font-size: 20px;
	font-weight: bold;
	color: #7b7b7b;
	font-family: 'Open Sans', sans-serif; 
	font-family: 'Roboto', sans-serif;
	text-align: center;
	line-height: 97%;
	padding-top: 10px;
}

#summary1_sheds{
	font-size: 35px;
	font-weight: bold;
	color: #7899b0;
	font-family: 'Open Sans', sans-serif;
	font-family: 'Roboto', sans-serif;	
	text-align: center;
	line-height: 125%;
	
}

.fisphist {
	font-weight: 700;
	cursor: pointer;
}
.glyphicon {
    font-size: 10px;
	vertical-align: 30%
}
	  
.ui {
	top: 10px;
	left: 50px;
	padding: 8px;
	position: absolute;
	background: white;
	background: rgba(255,255,255,0.9);
	border: 2px solid #707070;
	box-shadow: 0 0 15px rgba(0,0,0,0.2);
	border-radius: 7px;
	width: 320px;
}



/* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 32px;
  height: 20px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 12px;
  width: 12px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + #sliderTechRpt {
  background-color: #5678A6;
}

input:focus + #sliderTechRpt {
  box-shadow: 0 0 1px #5678A6;
}
input:checked + #sliderAmendTechRpt {
  background-color: #7EB7B1;
}

input:focus + #sliderAmendTechRpt {
  box-shadow: 0 0 1px #7EB7B1;
}
input:checked + #sliderBldgWalls {
  background-color: #EA9135;
}

input:focus + #sliderBldgWalls {
  box-shadow: 0 0 1px #EA9135;
}
input:checked + #sliderProtPublic {
  background-color: #D95D5B;
}

input:focus + #sliderProtPublic {
  box-shadow: 0 0 1px #D95D5B;
}

input:checked + .slider:before {
  -webkit-transform: translateX(12px);
  -ms-transform: translateX(12px);
  transform: translateX(12px);
}
#sliderTxt {
	line-height: 12px;
	vertical-align: middle;
}

.btn-primary{
	border: none;
}

.logo{
	/* background-image: url('data/dob_transparent_highres.png'); */
	background-image: url('https://raw.githubusercontent.com/NYCDOB/CommunityProfiles_v2/gh-pages/dob_logo_white_transparent.png');
	background-repeat: no-repeat;
	background-position: center;
	float: right;
	background-size: 80px;
	height: 50px;
	width: 110px;	  
}
.maprow{
	padding-top: 50px;
}
.chartrow{
	padding-top: 10px;
}
#chart-boro-vios {
	margin: 0px;
	padding: 0px;
	height: 100%;
	width: 100%;
}
#borovios{
	margin-top: 10px;
	padding: 0px;
	height: 270px;
	width: 100%;
	background-color: #fff;
}
#chart-timeline {
	margin: 0px;
	padding: 0px;
	height: 100%;
	width: 100%;
}
#chart-top5 {
	margin: 0px;
	padding: 0px;
	height: 100%;
	width: 100%;
}
#top5cd_total{
	margin-top: 10px;
	padding: 0px;
	height: 235px;
	width: 100%;
	background-color: #fff;
}
#top5cd_techRpt{
	margin-top: 10px;
	padding: 0px;
	height: 235px;
	width: 100%;
	background-color: #fff;
	display: none;
}
#top5cd_amendRpt{
	margin-top: 10px;
	padding: 0px;
	height: 235px;
	width: 100%;
	background-color: #fff;
	display: none;
}
#top5cd_bldgWalls{
	margin-top: 10px;
	padding: 0px;
	height: 235px;
	width: 100%;
	background-color: #fff;
	display: none;
}
#top5cd_protPub{
	margin-top: 10px;
	padding: 0px;
	height: 235px;
	width: 100%;
	background-color: #fff;
	display: none;
}
.btn-primary{
	border: none;
}

#top5_techRpt{
	background-color: #5678A6;
	opacity:0.8;
}
#top5_techRpt:hover, #top5_techRpt:focus, #top5_techRpt:active, #top5_techRpt.active{
	background-color: #5678A6;
	opacity:1;
}
#top5_amendRpt{
	background-color: #7EB7B1;
	opacity:0.8;
}
#top5_amendRpt:hover, #top5_amendRpt:focus, #top5_amendRpt:active, #top5_amendRpt.active{
	background-color: #7EB7B1;
	opacity:1;
}
#top5_bldgWalls{
	background-color: #EA9135;
	opacity:0.8;
}
#top5_bldgWalls:hover, #top5_bldgWalls:focus, #top5_bldgWalls:active, #top5_bldgWalls.active{
	background-color: #EA9135;
	opacity:1;
}
#top5_protectPub{
	background-color: #D95D5B;
	opacity:0.8;
}
#top5_protectPub:hover, #top5_protectPub:focus, #top5_protectPub:active, #top5_protectPub.active{
	background-color: #D95D5B;
	opacity:1;
}
#top5_total{
	background-color: #AD7BA1;
	opacity:0.8;
}
#top5_total:hover, #top5_total:focus, #top5_total:active, #top5_total.active{
	background-color: #AD7BA1;
	opacity:1;
}
.btn_top5{
	padding-top: 10px;
}

</style>
<body>
<div class="container">
			<div class="navbar navbar-fixed-top" role="navigation" style="color:white;background-color:RGB(61,74,87);">
			<a class="logo" href="https://www1.nyc.gov/site/buildings/index.page" target="_blank"> </a>
				<div class="nav navbar-nav" style="margin-left:15px;margin-top:10px;font-size:26px;font-weight:bold;text-align:center;">
					FACADE VIOLATIONS (PAST 3 YEARS)
				</div>
			</div>
</div>
<div class="container-fluid dobmain" style="margin-top:20px;">
	<div class="maprow">
		  <div class="col-lg-12" style="height:60vh">
			  <div class="chart-stage" id="map-container" style="border:1px solid black;height:100%;width:100%">
				<div id="map">
				<svg></svg>
					<div id="ui-container" class="ui" style="z-index: 401">
						<h5><b>FACADE VIOLATIONS</b></h5>
						<h6>(TOGGLE LAYERS ON & OFF)</h6>

						<span style="display:inline-block;">
						<label class="switch">
							<input type="checkbox" checked="true" id="chkTechRpt">
							<span class="slider" id="sliderTechRpt"></span>						
						</label>
						
						<span class="en" id="sliderTxt">Failure to File Facade Technical Report</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" checked="true" id="chkAmendTechRpt">
								<span class="slider" id="sliderAmendTechRpt"></span>
							</label>
							<span class="en" id="sliderTxt">Failure to File Amended Facade Technical Report</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" checked="true" id="chkBldgWalls">
								<span class="slider" id="sliderBldgWalls"></span>
							</label>
							<span class="en" id="sliderTxt">Failure to Maintain Building Walls</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" checked="true" id="chkProtPublic">
								<span class="slider" id="sliderProtPublic"></span>
							</label>
							<span class="en" id="sliderTxt">Failure to Protect the Public</span>
						</span>
						<br/>
					</div>
				</div>
			  </div>
		  </div>
	</div>
	<div class="chartrow">
		<div class="col-lg-6" style="height:28vh; margin-top:10px;">
			<div class="chart-wrapper" style="border:1px solid black;">
			  <div class="chart-stage" id="chart-boro-vios">
				<div class="summarytxt" >FACADE VIOLATIONS BY BOROUGH</br>
					<svg id="borovios"></svg>
				</div>
			  </div>
			</div>
			<div class="small text-muted" style="position:relative; bottom:0px; left:10px;">Built by DOB Analytics <a href="https://www1.nyc.gov/site/buildings/dob/analytics-reports.page" target=	"_blank">Dev Squad</a>
			</div>
		</div>
		<div class="col-lg-6" style="height:28vh; margin-top:10px;">
				<div class="chart-wrapper" style="border:1px solid black;">
				  <div class="chart-stage" id="chart-top5">
					<div class="summarytxt" >TOP 5 COMMUNITY DISTRICTS: FACADE VIOLATIONS</br>
										
						<div class="btn_top5">
							<button class="btn btn-primary btn-sm active" id="top5_total" type="button" >Total</button>
							<button class="btn btn-primary btn-sm" id="top5_techRpt" type="button" >Failure to File Technical Report</button>
							<button class="btn btn-primary btn-sm" id="top5_amendRpt" type="button" >Failure to File Amended Facade Technical Report</button>
							<button class="btn btn-primary btn-sm" id="top5_bldgWalls" type="button" >Failure to Maintain Building Walls</button>
							<button class="btn btn-primary btn-sm" id="top5_protectPub" type="button" >Failure to Protect the Public</button>
						</div>					
										
						<svg id="top5cd_total"></svg>
						<svg id="top5cd_techRpt"></svg>
						<svg id="top5cd_amendRpt"></svg>
						<svg id="top5cd_bldgWalls"></svg>
						<svg id="top5cd_protPub"></svg>
					</div>
				  </div>
				</div>
		</div>

		
	</div>
</div>
	
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.9/d3.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-format@3"></script>
<script src="https://nycdob.github.io/EssentialActiveConstruction/Leaflet.D3SvgOverlay-master/L.D3SvgOverlay.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="https://cdn.datatables.net/v/dt/dt-1.10.12/r-2.1.0/se-1.2.0/datatables.min.js"  type="text/javascript" charset="utf8" ></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.4.2/chroma.min.js"></script>
<script src="https://nycdob.github.io/ActiveNB_A1enlargements/build/nv.d3.js"></script>
<script src="https://d3js.org/d3-time-format.v2.min.js"></script>
<script type="text/javascript" src="https://nycdob.github.io/ActiveNB_A1enlargements/keen/keen.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/rowgroup/1.1.1/js/dataTables.rowGroup.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/plug-ins/1.10.20/api/fnSortNeutral.js"></script>
<script>
$(document).ready(function(){
	var formatTime = d3.time.format("%b-%y");
	var today = new Date();
	var dd = today.getDate();
	var mm = today.getMonth()+1;
	var yyyy = today.getFullYear();
	today = mm + '/' + dd + '/' + yyyy;	
	d3.select("#today").html(today);
	var latlong = [];
	var selection = [];
	var formatDate = d3.time.format("%-m/%-d/%Y").parse;
	var numberFormat = d3.format(",.0f");
	var legendNumFormat = d3.format(",");
	;localStorage.clear();
    L.Control.include({
      _refocusOnMap: L.Util.falseFn // Do nothing.
    });	
var map = L.map('map').setView([40.72215448921957, -73.98616799064006], 14);
L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png', {attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(map);


var tooltipFacades = d3.select('#map').append('div')//var tooltip = d3.select('body').append('div')
	.on('mouseover', function(d, i){
		tooltipFacades.transition().duration(0);
	})
	.on('mouseout', function(d, i){
		tooltipFacades.transition().delay(500).style('visibility', 'hidden');
	})
	.attr('class', 'tooltipFacades');
	

	
var width = $("#map").width(),
	height = $("#map").height(),
	points = [],
	table_map = [],
	filteredData,
	latLngs = [],
	pointsOverlay,
	legendShed,
	legendCD,
	cat,
	cdSheds,
	sheds_CD,
	previousColor,
	radius;
	
onload = ready();

	
function ready(){

	pointsOverlay = L.d3SvgOverlay(function(sel,proj){
		var pointsUpdSQFT = sel.selectAll('circle').data(points);

		pointsUpdSQFT.enter()
			.append('circle')		
			.attr('cx',function(d){return proj.latLngToLayerPoint(d.latLng).x;})
			.attr('cy',function(d){return proj.latLngToLayerPoint(d.latLng).y;})
			.attr('class', function(d){
				switch(d.vioDesc){
					case 'Failure to File Facade Technical Report':
						return 'pointTechRpt';
						break;
					case 'Failure to File Amended Facade Technical Report':
						return 'pointAmendTechRpt';
						break;
					case 'Failure to Maintain Building Walls':
						return 'pointBldgWalls';
						break;
					case 'Failure to Protect the Public':
						return 'pointProtPublic';
						break;
				}
			})
			
			.on('click', function(d){

				if(d3.select(this).style("fill-opacity") != 0){
					tooltipFacades.style("visibility", "visible");
					tooltipFacades.html(
						'ECB VIOLATION NUMBER: ' + [d.ecbNum] + '</br>' +
						'ISSUED DATE: ' + d.issuedDate + '</br>' +	
						'BIN: ' + d.bin + '</br>' +								
						'ADDRESS: '+ d.houseNum + ' ' + d.street + ', ' + d.Borough + '</br>' +
						'COMMUNITY DISTRICT: ' + d.CD + '</br>' +
						'VIOLATION DESCRIPTION: ' + d.vioDesc + '</br>'
					)
					if (d3.event.pageX > (width - 200)) {
					   tooltipFacades.style("left", (d3.event.pageX - 350) + "px");
					} else {
					   tooltipFacades.style("left", (d3.event.pageX + 20) + "px")
							.style("top", (d3.event.pageY -30) + "px");
					}
					if (d3.event.pageY > (height - 150)) {
					   tooltipFacades.style("top", (d3.event.pageY -100) + "px");
					} else {
					   tooltipFacades.style("top", (d3.event.pageY -30) + "px");
					}
				}        
			})
			.on("mouseover", function(d, i){
				previousColor = d3.select(this).style("fill");
				tooltipFacades.transition().duration(0); 
				$(this).attr("style", "cursor: pointer; fill: #eef442; fill-opacity: 0.7;");			
			})
			.on("mouseout", function(d, i){			
				d3.select(this).style("fill",previousColor);
				d3.select(this).style( "fill-opacity",0.7);
				return tooltipFacades.transition().delay(500).style("visibility", "hidden");
			});
		
			pointsUpdSQFT.attr("stroke-width", 1 / proj.scale);
			pointsUpdSQFT.attr("r", 6 /proj.scale);



			var techRptSlider = document.querySelector('input[id="chkTechRpt"]');
				amendTechRptSlider = document.querySelector('input[id="chkAmendTechRpt"]');
				bldgWallsSlider = document.querySelector('input[id="chkBldgWalls"]');
				protPublicSlider = document.querySelector('input[id="chkProtPublic"]');
				
				techRptSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointTechRpt").filter(function(d) {
								return d.vioDesc == "Failure to File Facade Technical Report";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointTechRpt").filter(function(d) {
								return d.vioDesc == "Failure to File Facade Technical Report";
							})
							.style("display", "none");
										
						}
				};		
				
				amendTechRptSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointAmendTechRpt").filter(function(d) {
								return d.vioDesc == "Failure to File Amended Facade Technical Report";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointAmendTechRpt").filter(function(d) {
								return d.vioDesc == "Failure to File Amended Facade Technical Report";
							})
							.style("display", "none");
										
						}
				};

				bldgWallsSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointBldgWalls").filter(function(d) {
								return d.vioDesc == "Failure to Maintain Building Walls";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointBldgWalls").filter(function(d) {
								return d.vioDesc == "Failure to Maintain Building Walls";
							})
							.style("display", "none");
										
						}
				};

				protPublicSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointProtPublic").filter(function(d) {
								return d.vioDesc == "Failure to Protect the Public";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointProtPublic").filter(function(d) {
								return d.vioDesc == "Failure to Protect the Public";
							})
							.style("display", "none");
										
						}
				};		
	});
	
	
	 
		d3.csv("data/ActiveFacadeECBViolation.csv",function(data){
				points = data.map(function(d){
				d.latLng = [+d["LAT"],+d["LONG"]];
				d.bin = d["BIN-Occurrence"];
				d.houseNum = d["House# Occurrence"];
				d.street = d["Street Occurrence"];
				d.Borough = d["Boro-Occurrence"];
				d.CD = d["Com Bd-Occurrence"];
				d.vioDesc = d["Vio Standard Description"];
				d.ecbNum = d["ECB Vio#"];
				d.issuedDate = d["Vio Issued Date"];
			return d;
			});
			

			pointsOverlay.addTo(map);

			d3.selectAll(".pointTechRpt").style("display", "block");
			d3.selectAll(".pointAmendTechRpt").style("display", "block");
			d3.selectAll(".pointBldgWalls").style("display", "block");
			d3.selectAll(".pointProtPublic").style("display", "block");
					

		//CHARTS
		//Vios by Borough
		var vioTypeOrder = ["Failure to File Facade Technical Report","Failure to File Amended Facade Technical Report","Failure to Maintain Building Walls","Failure to Protect the Public"];
		
		var nestBoroVios = d3.nest()
			.key(function(d){return d.vioDesc;}).sortKeys(function(a,b){return vioTypeOrder.indexOf(a) - vioTypeOrder.indexOf(b)}) //CUSTOM SORT
			.key(function(d){return d.Borough;})//.sortKeys(d3.ascending)
			.rollup(function(v) { 
				return v.length;
			})
			.entries(points)			
			console.log(nestBoroVios);
			
		var vioKeyVals = ["BRONX", "BROOKLYN", "MANHATTAN", "QUEENS", "STATEN ISLAND"];
		
		//SET MISSING KEY VALUES TO ZERO	
		makeAllKeys = function(d){
			var allKeys = vioKeyVals
			return allKeys
		}				
		nestBoroVios = nestBoroVios.map(function(d) {
				  return {
					key: d.key,
					values: makeAllKeys(+d.key).map(function(k) {
						value = d.values.filter(function(v) {return v.key == k})[0]
						return value || ({key: k, values:0})
						})
						}
					})
			
		//FORMAT NEST TO JSON (REQUIRED BY NVD3)
		var a1_boro=[],t=0;
		for (vObj of nestBoroVios ) {
				obj={key: vObj.key }
				a1_boro.push(obj);
				a2=[];
				for (x=0;x<vObj.values.length;x++) {
				   obj1={};
				   obj1.label=vObj.values[x].key;
				   obj1["value"]=vObj.values[x].values 
				   a2.push(obj1);
				}
				a1_boro[t].values=a2;
				t++;
		};
		vioBoroChart(nestBoroVios, vioKeyVals);
		
		console.log(nestBoroVios);
		
		function vioBoroChart(data, sortData){
			nv.addGraph(function() {
				var chart = nv.models.multiBarChart()
				.x(function(d) { return d.label })
				.y(function(d) { return d.value })		
				.duration(250)
				.margin({top: 30, right: 10, bottom: 25, left: 50})
				//.margin({right: 30})
				//.xDomain(['Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island'])
				.xDomain(sortData)
				.color(
				["#5678A6",
                "#7EB7B1",
                "#EA9135",
                "#D95D5B"])
				.showControls(false)
				.stacked(true);
				chart.legend.margin({bottom: 25});
				chart.yAxis.tickFormat(d3.format('.0f'));
				chart.yAxis
					.axisLabel('# Active Violations')
					.axisLabelDistance(-15);
					chart.xAxis.axisLabelDistance(10);
					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						var el = d3.select(this);
						var p = d3.select(this.parentNode);
						p.append("foreignObject")
							.attr('x', -35)
							.attr("width", 70)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 10px sans-serif; pointer-events: auto;')
							.html(d);
							el.remove();
							return d;
						}
				
				});
				
				d3.select('#chart-boro-vios svg')
						.datum(a1_boro)
						.transition().duration(250)
						.call(chart);
				nv.utils.windowResize(chart.update);
				return chart;
					
			})
		}

			//TOP 5 CDs TOTAL
			var topCD_total = d3.nest()
				.key(function(d) { return d.CD; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); }).slice(0,5);		
			topCDChart(topCD_total);
			
			//TOP 5 CDs TECH REPORT
			var filterVals=points.filter(function(d){
				return ((d["Vio Standard Description"]=="Failure to File Facade Technical Report"))
			})
			
			var topCD_techRpt = d3.nest()
				.key(function(d) { return d.CD; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); }).slice(0,5);				
			topCD_techRptChart(topCD_techRpt);
			
			//TOP 5 CDs AMENDED TECH REPORT
			var filterVals=points.filter(function(d){
				return ((d["Vio Standard Description"]=="Failure to File Amended Facade Technical Report"))
			})
			
			var topCD_amendtechRpt = d3.nest()
				.key(function(d) { return d.CD; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); }).slice(0,5);				
			topCD_amendtechRptChart(topCD_amendtechRpt);
			
			//TOP 5 CDs BUILDING WALLS
			var filterVals=points.filter(function(d){
				return ((d["Vio Standard Description"]=="Failure to Maintain Building Walls"))
			})
			
			var topCD_bldgWalls = d3.nest()
				.key(function(d) { return d.CD; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); }).slice(0,5);				
			topCD_bldgWallsChart(topCD_bldgWalls);
			
			//TOP 5 CDs PROTECT PUBLIC
			var filterVals=points.filter(function(d){
				return ((d["Vio Standard Description"]=="Failure to Protect the Public"))
			})
			
			var topCD_protPub = d3.nest()
				.key(function(d) { return d.CD; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); }).slice(0,5);				
			topCD_protPubChart(topCD_protPub);

			$('#top5_total').click(function(){
				$('#top5cd_total').show();
			   $('#top5cd_techRpt').hide();
			   $('#top5cd_amendRpt').hide();
			   $('#top5cd_bldgWalls').hide();
			   $('#top5cd_protPub').hide();
			   window.dispatchEvent(new Event('resize')); //ALLOW CHART TO FILL WIDTH OF DIV
			});			
			$('#top5_techRpt').click(function(){		  
			   $('#top5cd_techRpt').show();
			   $('#top5cd_amendRpt').hide();
			   $('#top5cd_bldgWalls').hide();
			   $('#top5cd_protPub').hide();
			   $('#top5cd_total').hide();
			   window.dispatchEvent(new Event('resize')); //ALLOW CHART TO FILL WIDTH OF DIV
			});
			$('#top5_amendRpt').click(function(){
			   $('#top5cd_techRpt').hide();
			   $('#top5cd_amendRpt').show();
			   $('#top5cd_bldgWalls').hide();
			   $('#top5cd_protPub').hide();
			   $('#top5cd_total').hide();
			   window.dispatchEvent(new Event('resize')); //ALLOW CHART TO FILL WIDTH OF DIV
			});
			$('#top5_bldgWalls').click(function(){
			   $('#top5cd_techRpt').hide();
			   $('#top5cd_amendRpt').hide();
			   $('#top5cd_bldgWalls').show();
			   $('#top5cd_protPub').hide();
			   $('#top5cd_total').hide();
			   window.dispatchEvent(new Event('resize')); //ALLOW CHART TO FILL WIDTH OF DIV
			});	
			$('#top5_protectPub').click(function(){
			   $('#top5cd_techRpt').hide();
			   $('#top5cd_amendRpt').hide();
			   $('#top5cd_bldgWalls').hide();
			   $('#top5cd_protPub').show();
			   $('#top5cd_total').hide();
			   window.dispatchEvent(new Event('resize')); //ALLOW CHART TO FILL WIDTH OF DIV
			});	
	
			$('.btn_top5').on('click', '.btn', function() {
			  $(this).addClass('active').siblings().removeClass('active');
			});

			function topCDChart(data){
				var totalCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					totalCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#AD7BA1']);
					chart.yAxis.tickFormat(d3.format(','));
					chart.yAxis
						.axisLabel('# Active Violations')
						.axisLabelDistance(-15);
					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#top5cd_total')
							.datum(totalCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}

			function topCD_techRptChart(data){
				var techRptCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					techRptCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#5678A6']);
					chart.yAxis.tickFormat(d3.format(','));
					chart.yAxis
						.axisLabel('# Active Violations')
						.axisLabelDistance(-15);
					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#top5cd_techRpt')
							.datum(techRptCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}

			function topCD_amendtechRptChart(data){
				var techAmdRptCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					techAmdRptCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7EB7B1']);
					chart.yAxis.tickFormat(d3.format(','));
					chart.yAxis
						.axisLabel('# Active Violations')
						.axisLabelDistance(-15);
					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#top5cd_amendRpt')
							.datum(techAmdRptCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}
			
			function topCD_bldgWallsChart(data){
				var bldgWallsCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					bldgWallsCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#EA9135']);
					chart.yAxis.tickFormat(d3.format(','));
					chart.yAxis
						.axisLabel('# Active Violations')
						.axisLabelDistance(-15);
					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#top5cd_bldgWalls')
							.datum(bldgWallsCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}
			
			function topCD_protPubChart(data){
				var protPubCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					protPubCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#D95D5B']);
					chart.yAxis.tickFormat(d3.format(','));
					chart.yAxis
						.axisLabel('# Active Violations')
						.axisLabelDistance(-15);
					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#top5cd_protPub')
							.datum(protPubCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}

		
		//Timeline chart
		var nestTimeLine = d3.nest()
			.key(function(d){return d.vioDesc;}).sortKeys(function(a,b){return vioTypeOrder.indexOf(a) - vioTypeOrder.indexOf(b)}) //CUSTOM SORT
			.key(function(d){return formatTime(new Date(d["Vio Issued Date"])) })			
			.rollup(function(v){
			return v.length   		
			})
			.entries(points)
			console.log(nestTimeLine);
			
			var nestDates = d3.nest()
				.key(function(d) { return formatTime(new Date(d["Vio Issued Date"])) })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(points)
				


			console.log(nestDates);
			
			var vioKeyDates = nestDates.map(function(d){
				return d.key;
			});
			

		console.log(vioKeyDates);
		//SET MISSING KEY VALUES TO ZERO	
		makeAllKeysTL = function(d){
			var allKeys = vioKeyDates
			return allKeys
		}				
		nestTimeLine = nestTimeLine.map(function(d) {
				  return {
					key: d.key,
					values: makeAllKeysTL(+d.key).map(function(k) {
						value = d.values.filter(function(v) {return v.key == k})[0]
						return value || ({key: k, values:0})
						})
						}
					})
			
			
			//FORMAT NEST TO JSON (REQUIRED BY NVD3)
			var a1=[],t=0;
			for (vObj of nestTimeLine ) {
					obj={key: vObj.key }
					a1.push(obj);
					a2=[];
					for (x=0;x<vObj.values.length;x++) {
					   obj1={};
					   obj1.label=vObj.values[x].key;
					   obj1["value"]=vObj.values[x].values 
					   a2.push(obj1);
					}
					a1[t].values=a2;
					t++;
			};
		vioTimeLine(nestTimeLine);
		
		function vioTimeLine(data){
			nv.addGraph(function() {
				var chart = nv.models.multiBarChart()
				.x(function(d) { return d.label } )
				.y(function(d) { return d.value } )	
				.duration(0)
				<!-- .margin({left: 100}) -->
				<!-- .margin({right: 30}) -->
				//.showControls(false)
				//.stacked(false);
				
				chart.yAxis.tickFormat(d3.format(',.0f'));
			   
				d3.select('#chart-timeline svg')
					.datum(a1)
					.call(chart);
				nv.utils.windowResize(chart.update);
				
				chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
				chart.state.dispatch.on('change', function(state){
					nv.log('state', JSON.stringify(state));
				});	
					
				return chart;
					
			})		
		}				
/*
		//CHARTS
			
			//TOTAL FACADE FILINGS
			var totalSheds = points.map(function(d) { return d.controlNum });
			console.log(totalSheds);
			d3.select("#summary1_sheds").html(numberFormat(totalSheds.length));
			
			//BOROUGH			
			var nestBoroSheds = d3.nest()
				.key(function(d){return d.Borough;})//.sortKeys(d3.ascending)
				.rollup(function(v) { 
					return v.length;
				})
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
				console.log(nestBoroSheds);
				shedBoroChart(nestBoroSheds);

			//CURRENT STATUS			
			var nestvioDesc = d3.nest()
				.key(function(d){return (d.vioDesc).toUpperCase();})//.sortKeys(d3.ascending)
				.rollup(function(v) { 
					return v.length;
				})
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
				console.log(nestvioDesc);
				statusChart(nestvioDesc);
				
			
			//SUB CYCLES
			var nestCycles = d3.nest()
				.key(function(d) { return d.cycle; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(points)
				//.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			console.log(nestCycles);
			cycleChart(nestCycles);
			
			//NRF SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["CN Filing Status"]=="No Report Filed"))
			})
			var nestPending = d3.nest()
				.key(function(d) { return d.cycle; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				//.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			//console.log(nestPending);
			pendChart(nestPending);

			//PENDING INSPECTIONS
			var nestPending = d3.nest()
				.key(function(d) { 
					if(d.pending=='Y'){
						return 'TRUE'} else {
							return 'FALSE'
						}
					 })
				.rollup(function(v) {
					return v.length;
				})
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			//console.log(nestPending);
			//pendChart(nestPending);


			//TOTAL SUB CYCLES
			var nestCycles = d3.nest()
				.key(function(d) { return d.cycle; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(points)
				//.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			console.log(nestCycles);
			cycleChart(nestCycles);

			//SAFE SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["Current Filing Status"]=="SAFE"))
			})
			var nestSafe = d3.nest()
				.key(function(d) { return d.cycle; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
			safeChart(nestSafe);
			
			//SWARMP SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["Current Filing Status"]=="SWARMP"))
			})
			var nestSWARMP = d3.nest()
				.key(function(d) { return d.cycle; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
			swarmpChart(nestSWARMP);
			
			//SWARMP (EXPIRED) SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["Current Filing Status"]=="SWARMP (EXPIRED)"))
			})
			var nestSWARMPexp = d3.nest()
				.key(function(d) { return d.cycle; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
			swarmpExpChart(nestSWARMPexp);
			
			//UNSAFE SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["Current Filing Status"]=="UNSAFE"))
			})
			var nestUNSAFE = d3.nest()
				.key(function(d) { return d.cycle; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
			unsafeChart(nestUNSAFE);
			
			//NRF SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["Current Filing Status"]=="No Report Filed"))
			})
			var nestNRF = d3.nest()
				.key(function(d) { return d.cycle; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
			nrfChart(nestNRF);
				
			function shedBoroChart(data){
				var shedBoroData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					shedBoroData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7899b0']);
					chart.yAxis.tickFormat(d3.format(','));

					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});		
					
					d3.select('#chart-boro-facades svg')
							.datum(shedBoroData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}

			function statusChart(data){
				var statusData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					statusData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7899b0']);
					chart.yAxis.tickFormat(d3.format(','));

					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});		
					
					d3.select('#chart-status svg')
							.datum(statusData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}
			
	function cycleChart(data){
				var shedCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					shedCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7899b0']);
					chart.yAxis.tickFormat(d3.format(','));

					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#subcycle_total')
							.datum(shedCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}
			
			 function safeChart(data){
			 	var safeData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		safeData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#59a14f']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			//chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	

											
			 				d3.select('#subcycle_safe')
			 						.datum(safeData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }			
			
			 function swarmpChart(data){
			 	var swarmpData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		swarmpData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#7EB7B1']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
										
			 				d3.select('#subcycle_swarmp')
			 						.datum(swarmpData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }			

			 function swarmpExpChart(data){
			 	var swarmpExpData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		swarmpExpData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#EA9135']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
											
			 				d3.select('#subcycle_swarmp_exp')
			 						.datum(swarmpExpData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
							 
			 				return chart;
			 		}
			 	);
				
			 }			

			 function unsafeChart(data){
			 	var unsafeData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		unsafeData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#D95D5B']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
											
			 				d3.select('#subcycle_unsafe')
			 						.datum(unsafeData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }
			
			 function nrfChart(data){
			 	var nrfData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		nrfData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#999A9C']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
											
			 				d3.select('#subcycle_nrf')
			 						.datum(nrfData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }
*/			
	});	
	
		
}

	
});	

</script>
</body>
</html>